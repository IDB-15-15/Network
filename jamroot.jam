
# Получаем путь до boost и подключаем его к своему проекту
import os ;
BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
OPENSSL_LIB = [ os.environ OPENSSL_LIB ] ;
OPENSSL_ROOT = [ os.environ OPENSSL_ROOT ] ;
#use-project openssl : $(OPENSSL_ROOT) ;
use-project boost : $(BOOST_ROOT) ;

project NetworkLib
	:
		# Конкретизируем параметры сборки; линковка статическая, чтобы не париться
		requirements <link>static <threading>multi <include>$(BOOST_ROOT) <include>$(OPENSSL_ROOT)
	: default-build release
	: build-dir build
	;


# Актуально только для сети (в остальных проектах if-else ниже писать не надо):
# дополнительно подключаем библиотеку винды для работы с сокетами
if [ os.name ] = NT
{
	lib ws2_32 : : <name>ws2_32 ;
	alias another-libs : ws2_32 ;
}
else
{
	alias another-libs ;
}

lib ssl : : <name>ssl ;
lib crypto : : <name>crypto ;
lib dl : : <name>dl ;


# Основная библиотека
lib Networklib
	:
		# Исходники текущего проекта (кроме tool_* и test_*)
		[ glob-tree *.cpp *.hpp *.ui : test_* tool_* ]
	 /boost/system another-libs $(OPENSSL_LIB) ssl crypto dl
		
	: <link>static
	: <variant>release
	;

# Приложение для отладки
exe tool_Networklib : src/tool_Networklib.cpp Networklib ;
install install_tool_Networklib : tool_Networklib : <location>build/bin ;


# Теперь библиотеки буста подключаются проще: /boost/имя_библиотеки
# Это работает только для компилируемых библиотек, для работы header-only библиотек буста
# (включая asio и др.) необходимо подключить одну из компилируемых библиотек, (напр. /boost/system)
#exe main : main.cpp /boost/filesystem another-libs ;
